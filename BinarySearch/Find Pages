// Input: nums = [12, 34, 67, 90], m=2

// Output: 113

// Explanation: The allocation of books will be 12, 34, 67 | 90. One student will get the first 3 books and the other will get the last one.

// Input: nums = [25, 46, 28, 49, 24], m=4

// Output: 71

// Explanation: The allocation of books will be 25, 46 | 28 | 49 | 24./ are 3, 4, and 3 respectively. 
// We cannot make the minimum distance greater than 3 in any ways.

import java.util.*;

public class Main {
    public static int findPages(int[] nums, int m) {
        if (m > nums.length) return -1; // Not enough books
        
        int low = Arrays.stream(nums).max().getAsInt();  // min possible max
        int high = Arrays.stream(nums).sum();            // max possible max
        int ans = -1;
        
        while (low <= high) {
            int mid = low + (high - low) / 2;
            if (canAllocate(nums, m, mid)) {
                ans = mid;
                high = mid - 1;   // try smaller maximum
            } else {
                low = mid + 1;    // need larger maximum
            }
        }
        return ans;
    }
    
    private static boolean canAllocate(int[] nums, int m, int limit) {
        int students = 1;
        int pages = 0;
        for (int n : nums) {
            if (pages + n > limit) {
                students++;
                pages = n;
                if (students > m) return false;
            } else {
                pages += n;
            }
        }
        return true;
    }
    
    public static void main(String[] args) {
        int nums1[] = {12, 34, 67, 90};
        int m1 = 2;
        System.out.println(findPages(nums1, m1));  // 113

        int nums2[] = {25, 46, 28, 49, 24};
        int m2 = 4;
        System.out.println(findPages(nums2, m2));  // 71
    }
}
