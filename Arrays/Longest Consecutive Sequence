import java.util.*;

public class Main {
------------------------------------------------------------------------------
//Optimal Approach

    public int longestConsecutive(int[] nums) {
        Set<Integer> set=new HashSet<>();
        int longest=0;
        for(int num :nums) set.add(num);
        for(int newNum :set){
            if(!set.contains(newNum-1)){
                int x=newNum;
                int c=1;
                while(set.contains(x+1)){
                    c++;
                    x++;
                }
                longest=Math.max(longest,c);

            }
        }
        return longest;
    }

------------------------------------------------------------------------------
//better approach
    public static int longestConsecutive(int[] nums) {
        Arrays.sort(nums);
        int max=0,c=0;
        for(int i=0;i<nums.length-1;i++){
            if((nums[i+1]-nums[i])==0) continue;
            if((nums[i+1]-nums[i])==1){
                c++;
            }
            if((nums[i+1]-nums[i])>1){
                max=Math.max(max,c);
                c=0;
            }
        }
        return c;
    }
    public static void main(String[] args) {
       int nums[] = {0, 3, 7, 5, 8, 4, 6, 0, 1};
       System.out.println(longestConsecutive(nums));
}
}
