// Input: head -> 1 -> 2 -> 3 -> 4 -> 5, n = 2

// Output: head -> 1 -> 2 -> 3 -> 5

// Explanation: The 2nd node from the back was the node with value 4.


public class Main {
    static class LinkedList {
        Node head;
        Node tail;

        static class Node {
            int data;
            Node next;

            public Node(int data) {
                this.data = data;
                this.next = null;
            }
        }

        // Add node at end
        public void add(int data) {
            Node newNode = new Node(data);
            if (head == null) {
                head = tail = newNode;
            } else {
                tail.next = newNode;
                tail = newNode;
            }
        }
                public void removingNth(int n) {
            if (head == null) {
                System.out.println("List is empty");
                return;
            }

            // Step 1: Find length
            Node temp = head;
            int length = 0;
            while (temp != null) {
                length++;
                temp = temp.next;
            }

            // Step 2: If n > length
            if (n > length) {
                System.out.println("Size of n is greater than the List size");
                return;
            }

            // Step 3: Find position from front
            int pos = length - n;

            // Step 4: If deleting head
            if (pos == 0) {
                head = head.next;
                return;
            }

            // Step 5: Traverse to (pos-1)
            temp = head;
            for (int i = 1; i < pos; i++) {
                temp = temp.next;
            }

            // Step 6: Delete node
            temp.next = temp.next.next;
        }
        public void printList(){
            if(head==null){
            System.out.println("List is empty");
            return;
                
            }
            Node temp=head;
            while(temp!=null){
                System.out.printf(temp.data+" ");
                temp=temp.next;
            }
            System.out.println();
        }
        

    }

    public static void main(String[] args) {
        LinkedList list = new LinkedList();
        list.add(1);
        list.add(2);
        list.add(3);
        list.add(4);
        list.add(5);
        list.printList();
        list.removingNth(2);
        list.printList();

    }
}
