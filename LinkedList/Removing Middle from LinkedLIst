// Input: head -> 1 -> 2 -> 3 -> 4 -> 5

// Output: head -> 1 -> 2 -> 4 -> 5

// Explanation: n = 5.

// ⌊n / 2⌋ + 1 = 3, therefore middle node has index 3 and so the node with value 3 was deleted.

public class Main {
    static class LinkedList {
        Node head;
        Node tail;

        static class Node {
            int data;
            Node next;

            public Node(int data) {
                this.data = data;
                this.next = null;
            }
        }

        // Add node at end
        public void add(int data) {
            Node newNode = new Node(data);
            if (head == null) {
                head = tail = newNode;
            } else {
                tail.next = newNode;
                tail = newNode;
            }
        }
        public void removeMiddle() {
            if (head == null || head.next == null) {
                head = null; // if 0 or 1 node, list becomes empty
                return;
            }

            // Step 1: count nodes
            int length = 0;
            Node temp = head;
            while (temp != null) {
                length++;
                temp = temp.next;
            }

            // Step 2: middle index = floor(n/2) + 1
            int middleIndex = (length / 2) + 1;

            // Step 3: traverse to (middleIndex - 1)
            temp = head;
            for (int i = 1; i < middleIndex - 1; i++) {
                temp = temp.next;
            }

            // Step 4: delete middle node
            temp.next = temp.next.next;
        }
        public void printList(){
            if(head==null){
            System.out.println("List is empty");
            return;
                
            }
            Node temp=head;
            while(temp!=null){
                System.out.printf(temp.data+" ");
                temp=temp.next;
            }
            System.out.println();
        }
        

    }

    public static void main(String[] args) {
        LinkedList list = new LinkedList();
        list.add(1);
        list.add(2);
        list.add(3);
        list.add(4);
        list.add(5);
        list.printList();
        list.removeMiddle();
        list.printList();

    }
}
