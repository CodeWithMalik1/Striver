// Input: head -> 3 -> 8 -> 7 -> 1 -> 3
// Output(value at returned node): 7
// Explanation: There are 5 nodes, so the middle node is the 3rd Node, with value 7.
// Input: head -> 2 -> 9 -> 1 -> 4 -> 0 -> 4
// Output(value at returned node): 4
// Explanation: There are 6 nodes, thus both the 3rd and 4th nodes are middle. So the 2nd middle node (4th Node) is returned with value 4.


public class Main
{
    static class LinkedList{
        Node head;
        Node tail;
        int size;
        class Node{
            Node next;
            int data;
            Node(int data){
                this.data=data;
                this.next=null;
            }
        }
        public void add(int data){
            Node newNode=new Node(data);
            if(head==null){
                head=newNode;
                tail=newNode;
            }
            else{
                  newNode.next=head.next;
                  head.next=newNode;
                 
            }
            size++;
        }
        public int getMiddle(){
            if(head==null) return -1;
            Node slow=head;
            Node fast=head;
            while(fast!=null && fast.next!=null){
                slow=slow.next;
                fast=fast.next.next;
            }
            return slow.data;
            
            
        }
        public void printList(){
            if(head==null){
                System.out.print("List is empty");
                return;
            }
            Node temp=head;
            while(temp!=null){
                System.out.print(temp.data+" ");
                temp=temp.next;
            }
            System.out.println();
        }
        
    }
	public static void main(String[] args) {
	    LinkedList li=new LinkedList();
	    li.add(20);
	    li.add(24);
	    li.add(23);
	    li.add(22);
	    li.add(17);
	    li.printList();
	    System.out.println("Middle node value: " + li.getMiddle());

        LinkedList li2 = new LinkedList();
        li2.add(2);
        li2.add(9);
        li2.add(1);
        li2.add(4);
        li2.add(0);
        li2.add(4);

        li2.printList();
        System.out.println("Middle node value: " + li2.getMiddle());
	}
}
